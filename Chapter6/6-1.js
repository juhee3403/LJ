
///////////////////
//      함수      //
///////////////////

// 함수는 하나의 단위로 실행되는 문의 집합니다.
// 함수를 일종의 부속 프로그램으로 생각해도 좋다.
// 함수는 js의 강력함과 표현성(expressiveness)의 근간이다.
// 이 장에서는 함수의 기본적인 사용법과 동작 방식을 소개한다.

// 모든 함수에는 바디가 있다.
// 함수 바디는 함수를 구성하는 문의 모음이다.

function sayHello() {
    // 함수 바디는 여는 중괄호로 시작하고

    console.log("Hello world!");

    // 닫는 중괄호로 끝난다.
}

// 앞의 예제는 '함수 선언(function declaration)'의 한 예이다.
// 우리는 sayHello라는 함수를 선언했다.
// 함수를 선언하기만 해서는 바디가 실행되지 않는다.
// 이 예제만으로는 콘솔에 "Hello world" 메시지가 출력되지 않는다.
// 함수를 호출(call)할 때는 함수 이름 다음에 괄호를 쓴다.

sayHello();     // 콘솔에 "Hello world!"가 출력된다.

// 호출한다(call, invoke)와 
// 실행한다(execute, run)은 섞어서 써도 된다.
// 이 책에서는 문맥에 맞게 단어를 선택해서 쓸 것이다.
// 컨텍스트와 언어에 따라 이들 용어 사이에 미묘한 차이가 있을 수도 있지만,
// 일반적으로 같다고 봐도 된다.


// 반환 값(return)

// 함수 호출도 표현식이고, 우리가 이미 알고 있듯 표현식은 값이 된다.
// 그러면 함수 호출의 값은 무엇일까?
// 그것이 반환 값이다.
// 함수 바디 안에 return 키워드를 사용하면 함수를 즉시 종료하고 값을 반환한다.
// 그 값이 바로 함수 호출의 값이다.

// 예제를 수정해서 환영 인사를 출력하지 않고 반환하도록 만들어 보자.
function getGreeting() {
    return "Hello world!";
}
// 이제 이 함수를 호출하면 함수 호출은 반환 값이 된다.
getGreeting();                  // "Hello world!"

// return을 명시적으로 호출하지 않으면 반환 값은 undefined가 된다.
// 함수는 어떤 타입의 값이라도 반환할 수 있다.

