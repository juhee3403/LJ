// 3이나 5.5, 1,000,000 처럼 컴퓨터가 정확히 나타낼 수 있는 숫자도 있지만, 근사치로만 표현할 수 있는 숫자도 많다.
// 예를 들면, π는 절대로 컴퓨터롤 표현할 수 없다.
// 원주율을 구성하는 숫자는 무한하고 반복되지도 않기 때문이다.
// 10/3 같은 숫자는 특별한 테크닉을 써서 나타낼수 있지만,
// 소수점 아래자리가 무한히 반복되므로(3.3333...), 일반적으로 근사치로만 나타낸다.

// js도 다른 프로그래밍 언어와 마찬가지로 실제 숫자의 근사치를 지정할 때,
// IEEE-764배정도(double-precision) 부동소수점 숫자 형식을 사용합니다.
// 앞으로 이 형식을 '더블'이라고 부를것이다.
// js로 심도있는 숫자형 분석을 하지 않은 한 더블 형식을 이해할 필요는 별로 없다.

// 더블 형식의 근사치 결과는 종종 당혹스럽게 하는데,
// 0.1 + 0.2는 0.3000000000000004를 반환한다.
// 이 결과는 js에 버그가 있거나, 덧셈을 할줄 몰라서가 아니다.
// 이건 무한한 값을, 유한한 메모리안에서 기능한 한 정확지 짐작하려다 생긴 결과일 뿐이다.

// js에는 숫자형 데이터 타입이 하나 밖에 없는데,
// 이건 흔치 않은 일이다.
// 대부분의 프로그래밍 언어는, 여러가지 정수 타입을 사용하며 부동소수점 숫자 타입도 두가지 이상 사용한다.
// 숫자형 데이터를 하나만 갖기로 한 선택은 js를 단순한 언어로, 특히 초보자에는 부담없는 언어로 만들었다는 장점이 있다.
// 반면, js를 고성능 정수 연산이나 정밀한 소수점 연산이 필요한 어플리케이션에서 쓸 수 없게 만든 선택이기도 하다. 

// js는 10진수, 2진수, 8진수, 16진수의 네가지 숫자형 리터럴을 인식한다.
// 10진 리터럴에는 소수점 없는 정수, 소수점 있는 10진수(12,34 등), 과학에서 사용하는 지수 표기법을 쓸 수 있다.
// 그외에도 무한대, 음의 무한대, '숫자가 아님'을 나타내는 특별한 값들이 있다.
// 엄밀히 말해 이들은 숫자형 리터럴이 아니지만, 숫자형 값이므로 여기 포함하였다.

let count = 10;         // 숫자 리터럴. count는 더블입니다.
const blue = 0x0000ff;  // 16진수. 16진수 ff는 10진수 255와 같다.
const umask = 0o0022;   // 8진수. 8진수 22는 10진수 18과 같다.
const roomTemp = 21.5;  // 십진수
const c = 3.0e6;        // 지수 (3.0 x 10^6 = 3,000,000)
const e = -1.6e-19;     // 지수 (-1.6 x 10^19 = 0.00000000000000000016)
const inf = Infinity;
const ninf = -Infinity;
const nan = NaN;        // "숫자가 아님"

// 10진수, 16진수, 지수 등 어떤 리터럴 형식을 사용하더라도 결국 숫자는 '더블' 형식으로 저장된다.
// 다양한 리터럴 형식은 숫자를 간편한 형식으로 표현할 수 있도록 제공된 것뿐이다.
// js가 표시할 수 있는 숫자 형식에는 제한이 있다.

// 무한대는 숫자가 아니다.
// NaN도 숫자가 아니다.
// 이들은 계산에 이용되는 숫자라기보다는 일종의 '플레이스 홀더'이다. 
    // "플레이스홀더 -> 들어갈 내용이 더 있는 곳"

// 또한 숫자에 대응하는 Number 객체에는 중요한 숫자형 값에 해당하는 유용한 프로퍼티가 있다.
const small = Number.EPSILON;           // 1에 더했을 때 1과 구분되는 결과를 만들 수 있는
                                        // 가장 작은 값이다. 근사치는 2.2e-16.
const bigInt = Number.MAX_SAFE_INTEGER; // 표현할 수 있는 가장 큰 '정수'
const max = Number.MAX_VALUE;           // 표현할 수 있는 가장 큰 '숫자'
const minInt = Number.MIN_SAFE_INTEGER; // 표현할 수 있는 가장 작은 '정수'
const min = Number.MIN_VALUE;           // 표현할 수 있는 가장 작은 '숫자'
const nInf = Number.NEGATIVE_INFINITY;  // -Infinity
const nan = Number.NaN;                 // NaN
const inf = Number.POSITIVE_INFINITY;   // Infinity
