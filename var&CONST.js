// 변수(variable) == 이름이 붙은 값
// 언제나 바뀔수 있는 값 == 변수

let currentTempC = 22;
// let을 사용
// 변수를 생성하고 초기값 22를 할당

currentTempC = 22.5;
// 이번에는 let을 사용하지 않았다
// 변수의 할당값을 새롭게 지정

let currentTempC;
// 변수를 선언할때 꼭 변수의 초기값이 있어야 하는것은 아니다.
// 지정하지 않으면 암시적으로 undefined가 할당된다.

let currentTempC; // let currentTempC = undefined 와 같다.

let targetTempC, room1 = "conference_room_a", room2 = "robby";
// let문 하나에서 변수 여러개를 선언할 수 있다.
// targetTempC는 값을 할당하지 않았으므로, undefined
// room1은 "conference_room_a"
// room2는 "robby"

const ROOM_TEMP_C = 21.5, MAX_TEMP_C = 30;
// 상수는 ES6 에서 새롭게 생겼다.
// const 를 사용하면 상수를 선언할 수 있다.
// 절대적인 규칙은 아니지만 상수이름에는 보통 대문자와 밑줄만 사용한다.
// 이러한 규칙을 따르면, 코드에서 상수를 찾기쉽고, 상수의 값을 바꾸려 하지도 않게 된다.


//  변수와 상수중 어떤 것을 사용해야 할까??
//      될 수 있으면 변수보다 상수를 써야한다.
//      데이터의 값이 아무때나 막 바뀌는 것보다, 고정된 값이 이해하기 쉽다.
//      상수를 사용하면, 값을 바꾸지 말아야 할 데이터에서 실수로 값을 바꾸는 일이 줄어 든다.
//      만약 채팅방서비스에 유저(상수 USER)가 한명밖에 없다면,
//      바뀔수 없는 값이며, 바뀌었다면 에러가 발생한다.
//      상수를 사용하면 프로그래머가 신경쓰지 않아도 js가 알아서 에러를 일으킨다.
//      만약 사용자가 두명이면 user변수를 사용하는것 보다, 상수 USER1, USER2로 나누는 편이 낫다.

//      따라서 상수를 먼저 생각한다.
//      상수의 값이 바귀는것이 자연스럽게 느껴진다면,
//      언제든지 변수로 바꾸면 되는 것이다.

//      예외로 언제나 변수를 써야하는 경우도 있다.
//      루프제어에서는 변수를 써야한다. (for문의 횟수 지정시.)
//      시간이 지나면서 값이 바뀌는 경우에도 변수를 사용.

//      일단 상수를 사용하는 습관을 들이면, 변수가 꼭 필요한 상황이 생각보다 훨씬 적다는 것을 알고 놀라게 된다.
//      그래서, 가능하면 항상 '변수'대신 '상수'를 쓰도록 할 것이다.