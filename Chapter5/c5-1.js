/////////////////
// 표현식과 연산자 //
/////////////////

// 표현식(expression)은 값으로 평가될 수 있는 문.
// 표현식, 즉 결과가 값인 문과, 
// 표현식이 아닌 문의 차이를 이해하는 것이 중요.
// 이 차이를 이해해야만 js의 요소들을 효과적으로 조합할 수 있다.

// 표현식이 아닌 문(statement)은 일종의 '지시'라고 생각할 수 있고,
// 표현식은 무언가를 요청하는 것이라고 생각할 수 있다.

// 직장에 첫 출근 했다고 상상하자
// 상사가 다가와서 "당신이 할 일은 볼트A를 너트B에 끼우는 일입니다"하고 말했다면,
// 상사가 한 말은 표현식이 아닌 '문'입니다.
    // 상사는 당신에게 조립한 결과물을 요청한 것이 아니라,
    // 그저 조립할 것을 지시했을 뿐이기 때문이다.
// 상사가 "볼트A를 너트B에 끼우고, 내가 검사할 수 있도록 가져오세요"라고 말했다면,
// 그것은 '표현식'이다.
    // 당신은 지시를 받았고, 그 결과를 반환해야 한다.
    // "어떻든 결과는 마찬가지 아닌가? 조립한 결과를 그냥 두든, 상사에게 가져가든 조립된 건 마찬가지인데"라고 생각할 수도 있다.
    // 프로그래밍 언어라고 해도 상황이 180도 달라지는 건 아니다.
    // 표현식이 아닌 문도 보통 뭔가를 합니다.
// 하지만 그 결과를 명시적으로 반환하는 것은 표현식이다.

// 표현식은 값이 된다.
// 그 결과를 다른 표현식에 결합해서 다른 값을 얻을 수 있다.
// 그 값을 또 다른 표현식에 결합해서 또 다른 값을 얻는 식으로 이어질 수 있다.
// 표현식이 아닌 문은 이런 식으로 결합할 수 없다.

// 표현식은 값이 되므로 할당에 쓸 수 있다.
// 즉, 표현식의 결과를 변수나 상수, 프로퍼티에 할당할 수 있다.
// 표현식의 예를 하나 들어 보자
// 곱셉을 표현식이다.
// 이해하기 쉽지? 두 숫사를 곱하면 결과가 나온다.
let x;
x = 3 * 5;
// 첫 번째 행은 선언문이다.
// 우리는 변수 x가 있다고 선언했다.
// 물론 두 행을 결합할 수 있지만, 그렇게 하면 요점이 잘 드러나지 않는다.
// 두 번째 행을 잘 보자.
// 이 행에는 사실 표현식이 2개 있다.
// 첫 번째 표현식은 3 * 5이다. 곱셈 표현식이고, 결과는 15다.
// 그 다음은 값 15를 변수 x에 할당한 표현식이다.
// 할당은 그 자체가 표현식이다.
// 음...? 표현식은 값이 된다고 했는데, 그럼 할당 표현식을 어떤 값이 되는 걸까?
// 물론 할당 표현식도 값이 된다.
// x만 값 15를 할당 받는 것이 아니라, 전체 표현식의 결과도 값 15이다.
// 할당은 표현식이고, 따라서 값이 되므로, 다른 변수에 다시 할당할 수 있다.
let x, y;
y = x = 3 * 5;
// 이제 x와 y 두 변수가 있고 값은 15다.
// 이런 일이 가능한 것은 곱셈과 할당이 모두 표현식이기 때문이다.
// js는 이렇게 표현식이 결합된 것을 보면 
// 쪼갤수 있는 만큼 쪼개서 한 부분씩 실행한다.
let x, y;
y = x = 3 * 5;  // 원래 문
y = x = 15;     // 곱셈 표현식을 평가했다.
y = 15;         // 첫번째 할당을 평가했다. x는 이제 15이고,
                // y는 아직 undefined.
15;             // 두번째 할당을 평가했다. y는 이제 15다.
                // 전체 문의 결과는 15다.
                // 이 값은 사용하지도 않았고, 어딘가에 할당하지도 않았으니 그냥 버려진다.

// 그러면 이제 js는 어떤 원칙으로 표현식을 그런 순서로 실행하는가 하는 의문이 들것이다.
// 즉, y = x를 먼저 실행해서 y에 값 undefined를 할당하고
// 그 다음에 곱셈을 해서 y는 undefined로 남고 x는 15가 될 수도 있지 않느냐는 의문 말이다.
// js가 표현식을 평가하는 순서를 연산자 우선순위라 부른다.

// 표현식은 대부분 연산자(operator) 표현식이다.
// 즉 곱셈 표현식은 곱셈 연산자(*)와 피연산자(operand) 두 개로 이루어진다.
// 피연산자는 서로 곱하는 두 숫자이며 피연산자 자체도 표현식이다.
// 표현식은 모두 평등하다. 
// 값이 되는 것은 모두 표현식이므로, 
// 변수와 상수, 리터럴이 모두 표현식인 것은 당연하다.

