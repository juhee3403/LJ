
// 피연산자가 불리언이 아닐 때 논리 연산자가 동작하는 방법

// 불리언 피연산자를 사용하면 논리 연산자는 항상 불리언을 반환한다.
// 피연산자가 불리언이 아니라면, '결과를 결정한 값'이 반환된다.

// 불리언이 아닌 피연산자에 대한 AND(&&) 진위표 (참/거짓 같은 값을 줄여서 참, 거짓으로 표기)
// x        y           x && y
// 거짓       거짓         x
// 거짓       참           x
// 참        거짓          y
// 참        참           y    

// x        y           x || y
// 거짓       거짓         y
// 거짓       참           y
// 참        거짓          x
// 참        참           x    

// 결과를 불리언으로 변환하면 불리언 값을 제공했을 때의 진위표와 같은 결과가 된다.
// 논리 연산자의 이런 동작 방식을 활용하는 간편한 팁이 있다.
// 다음 패턴은 아주 자주 쓰고, 또 보게 될 것이다.
const options = suppliedOptions || { name: "Default"};
// 객체는 항상(빈 객체라도) 참 같은 값으로 평가 된다.
// 따라서 suppliedOptions가 객체이면 
// options는 suppliedOptions를 가리키게 된다.
// 옵션이 제공되지 않으면,
// 즉, suppliedOptions가 null이나 undefined라면 options는 기본값을 가지게 된다.

// NOT은 불리언 아닌 값을 반환할 수 없으므로 
// ! 연산자는 피연산자의 타입이 무엇이든 항상 불리언을 반환한다.
// 피연산자가 참 같은 값이면 false, 거짓 같은 값이면 true를 반환한다.