
// 비교 연산자

// 비교 연산자는 이름처럼 두 개의 값을 비교한다.
// 크게 말해 비교 연산자는 일치함strict equality(===), 동등함loose equality(==), 대소 관계의 세 가지 타입으로 나뉜다.
// (불일치는 일치의 한 종류라고 보기 때문에 다른 타입으로 나누지는 않는다)

// 일치와 동등의 차이
    // 일치 : 두 값이 같은 객체를 가리키거나, 같은 타입이고 값도 같다(원시 타입)
    // 일치 관계는 아주 단순하고 이해하기 쉬워 버그나 오해를 낳는 경우는 거의 없다.
    // 두 값이 일치하는지 확인할 때는 === 연산자를 쓰거나 그 반대인 !==연산자를 쓴다.

    // 동등 : 두 값이 같은 객체를 가리키거나, 같은 값을 갖도록 변환할 수 있는 것.
    // 문자열 "33"은 숫자 33으로 변환할 수 있으므로 이 둘은 동등하다.
    // 하지만 타입이 다르므로 일치하지는 않는다.
    // 이런 편리함 때문에 수많은 부작용이 생길 수 있다.
    // 그러므로 문자열은 미리 숫자로 변환해서 일치하는지 비교하길 권한다.
    // 동등한지 아닌지 비교할 떄는 == 연산자나 != 연산자를 사용한다.

    // 동등 연산자 때문에 생긱는 문제는 대개 undefined, null, 숫자 0, 빈문자열 때문이다.
    // 동등 연산자를 사용하는 것으로 불필요한 문제가 생길수 있는 점이 있으니
    // 일치 연산자만 사용하는 것을 권한다.

// 다음은 일치 연산자와 동등 연산자의 예
// 객체 a와 b에 같은 정보가 들어 있더라도, 
// 그들은 '서로 다른 객체'이며, 일치하지도 동등하지도 않다.
const n = 5;
const s = "5";
n === s;            // false
n !== s;            // true
n === Number(s);    // true
n !== Number(s);    // false
n == s;             // true;    권장하지 않는다!!!!!!!!!
n != s;             // false;   권장하지 않는다!!!!!!!!!

const a = { name: "an object" };
const b = { name: "an object" };
a === b;            // false
a !== b;            // true
a == b;             // false;   권장하지 않는다!!!!!!!!!
a != b;             // true;    권장하지 않는다!!!!!!!!!

// 관계 연산자는 관계가 있는 값을 비교하며, 
// 문자열이나 숫자처럼 원래 순서가 있는 데이터 타입에만 사용할 수 있다.("a"는 항상 "b"보다 앞에 있다)
// 관계 연산자는 작다(<), 작거나 같다(<=), 크다(>), 크거나 같다(>=) 네 가지가 있다.
3   >   5;              // false
3   >=  5;              // false
3   <   5;              // true
3   <=  5;              // true

5   >   5;              // false
5   >=  5;              // true
5   <   5;              // false
5   <=  5;              // true
