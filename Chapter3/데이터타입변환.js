
// 데이터 타입 변환

// 데이터 타입을 다른 타입으로 바꾸는 일은 매우 자주 있는 일이다.
// 사용자 입력이나 다른 시스템에서 가져온 데이터를 
// 그대로 쓸 수 있는 경우는 별로 없고, 대개 변환해야 한다.


// 숫자로 바꾸기
// 사용자에게 받은 입력은 보통 문자열로 받는데,
// js에는 문자열을 숫자로 바꾸는 방법이 몇가 있다.
// 첫번째는 Number 객체 생성자를 사용하는 방법
const numStr = "33.3";
const num = Number(numStr);         // 이 행은 숫자 값을 만든다.
                                    // Number 객체의 인스턴스가 아니다.

// 숫자로 바꿀 수 없는 문자열에서는 NaN이 반환된다.

// 두번째 방법은 내장 함수인 parseInt나 parseFloat 함수를 사용하는 방법이다.
// 이들은 Number 생성자와 비슷하게 동작하지만 몇 가지 다른 점이 있다.
// parseInt를 사용할 때는 기수(radix)를 넘길 수 있다.
// 기수는 변환할 문자열이 몇 진수 표현인지 지정한다.
// 예를 들어 16진수를 반환할 때는 기수로 16을 넘긴다.
// 기수 기본값은 10이라 10진수 표현을 변환할 때는 기수를 쓰지 않아도 결과는 같지만,
// 항상 기수를 명시하는것을 권한다.
// parseInt와 parseFloat는 모두 숫자로 판단할 수 있는 부분까지만 변환하고,
// 그 뒤에 있는 문자열은 무시 한다.
// 문자열의 형태가 엉망진창이어도 입력값으로 쓸 수 있다.
const a = parseInt("16 volts", 10); // " volts"는 무시된다. 10진수 16
const b = parseInt("3a", 16);       // 16진수 3a를 10진수로 바꾼다. 결과는 58
const c = parseFloat("15.5 kph");   // " kph"는 무시된다. 
                                    // parseFloat는 항상 기수가 10이라고 가정한다.

// Date 객체를 숫자로 바꿀 때는 valueOf() 메서드를 사용한다.
// 이 숫자는 UTC 1970년 1월 1일 자정으로부터 몇 밀리초가 지났는지 나타내는 숫자.
const d = new Date();               // 현재 날짜
const ts = d.valueOf();             // UTC 1970년 1월 1일 자정으로부터 몇 밀리초 지났는가

// 불리언 값을 1(true)나 0(false)으로 바꿔야 할 때도 있다.
// 이렇게 변환할 때는 조건연산자를 사용한다.
const b = true;
const n = b ? 1 : 0;
