
// 블록문(block statement)

// 불록문 엄밀히 말해 제어문이 아니지만 제어문과 함께 쓰인다.
// (복합문 compound statement 라고도 한다)
// 블록문은 문(statement) 여러 개를 중괄로로 묶은 것이며
// js에서는 이들을 하나의 단위로 취급한다.
// 제어문 없이 블록문만 써도 되지만 별 의미는 없다.
// 다음을 보자

{   // 블록문 시작
    console.log("statement1");
    console.log("statement2");
}   // 블록문 끝
console.log("statement3");
// 처음 두 console.log는 블록 안에 있다.
// 유효한 문법이지만, 무의미하다.

// 블록문이 유용해지는 것은 제어문과 함께 쓸 때다.
// 예를 들어 while문에서 실행하는 루프는 
// 블록문 전체를 실행한 후 조건을 다시 테스트한다.

// 제어문에는 블록을 쓰는 것이 일반적이지만
// 꼭 그래야 하는 건 아니다.
// 예를 들어 100이 될때까지 계속 2만 더하기만 한다면 블록문을 쓰지 않아도 된다.



// 공백

// 대부분의 경우 js는 줄바꿈 문자를 포함해, 추가 공백을 신경 쓰지 않는다.
// 스페이스 하나가 스페이스 10개나 마찬가지고,
// 스페이스 10개나 빈 줄 10개나 마찬가지다.
// 그렇다고 해서 공백을 아무렇게나 쓰는게 아니고,다음과 같이 쓰자.

let funds = 50;
while(funds>1 && funds<100)

funds = funds + 2;
// 하지만 이 코드는 두 문 사이에 어떤 연관이 있다는 느낌을 주지 않는다.
// 이런 코드는 오해의 소지가 다분하니 피해야 한다.
// 다음 코드도 같은 일은 하는데, 이런 스타일은 비교적 흔히 쓰이는 편이고 모호해 보이지도 않는다.

// 줄바꿈 없음
while (funds > 1 && funds < 100) funds = funds + 2;

// 줄바꿈 없이 문하나를 블록안에 썼음.
while (funds > 1 && funds < 100) {funds = funds + 2;}

// 프로그래머 중에는 제어문 바디를 항상(단 하나의 문이라도) 블록 안에 써서 일관성을 유지하고
// 의미를 명료하게 표현해야 한다고 주장하는 사람들이 있다.
// 적극적으로 동참하지는 않지만, 부주의한 들여쓰기는 이런 논쟁의 기름을 붓는 행동이 된다.

while (funds > 1 && funds < 100)
    funds = funds + 2;
    funds = funds - 1;
// 언뜻 보면 while 루프의 바디에서 2개 문을 실행하는 것처럼 보인다.
// 하지만 여기에는 블록이 없으므로 js는 위 코드를 다음과 같이 해석한다. 

while (funds > 1 && funds < 100)
    funds = funds + 2;      // 루프 바디

funds = funds - 1;          // while이 끝난 다음 실행

// 필자는 개인적으로 문 하나만 쓸 때 블록을 생략하는 편이지만,
// 들여쓰기는 항상 의미가 명확히 드러나도록 써야 한다.

// 그리고, if문 안에서 문법적으로 유요하지만 거의 모든사람에게 환영받지 못하는 스타일이 있다.
// 같은 if문 안에 블록문과 블록없는 문을 섞어 쓰지 말자.
if (funds > 1) {
    console.log("1111");
} else          // 블록 없음
    console.log("other");

if (funds > 1)  // 블록 없음
    console.log("1111");
else {
    console.log("other");
}